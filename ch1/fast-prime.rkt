#lang racket
(define (square x)
  (* x x)
  )
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp) (remainder (square (expmod base (/ exp 2) m)) m))
        (else (remainder (* base (square (expmod base (/ (- exp 1) 2) m))) m))
        )
  )
(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a)
    )
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime n times)
  (cond ((= times 0) (= 1 0))
        ((fermat-test n) (= 0 0))
      (else (fast-prime n (- times 1)))))
